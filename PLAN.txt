update front and back - work only with number (not float in form fields)


// --------------------------
2. Створення серверного API-маршруту:

Nuxt.js автоматично обробляє файли в каталозі server/api як серверні API-маршрути. Створіть файл server/api/hello.js (або server/api/hello.ts, якщо ви використовуєте TypeScript) з наступним вмістом:

JavaScript (server/api/hello.js):

JavaScript

export default defineEventHandler((event) => {
  return {
    message: 'Привіт від Nuxt.js Server API!',
    timestamp: Date.now()
  }
})
TypeScript (server/api/hello.ts):

TypeScript

import { defineEventHandler } from 'h3';

export default defineEventHandler((event) => {
  return {
    message: 'Привіт від Nuxt.js Server API!',
    timestamp: Date.now()
  };
});
Пояснення:

defineEventHandler: Це функція з бібліотеки h3 (яку використовує Nuxt.js для обробки серверних запитів), яка допомагає визначити обробник подій для вашого API-маршруту.
(event) => { ... }: Це асинхронна функція, яка приймає об'єкт event, що містить інформацію про вхідний запит.
return { message: ..., timestamp: ... }: Функція повертає JavaScript-об'єкт. Nuxt.js автоматично перетворює цей об'єкт у JSON-відповідь.
3. Запуск сервера розробки:

Запустіть сервер розробки Nuxt.js за допомогою наступної команди:

Bash

npm run dev # або yarn dev або pnpm dev
4. Тестування API-маршруту:

Після запуску сервера ви можете отримати доступ до вашого API-маршруту, відкривши наступну URL-адресу у вашому браузері або за допомогою такого інструменту, як curl:

http://localhost:3000/api/hello
Ви повинні побачити JSON-відповідь, схожу на таку:

JSON

{
  "message": "Привіт від Nuxt.js Server API!",
  "timestamp": 1678886400000 // Приблизний поточний timestamp
}
Розширення серверного API:

Ви можете створювати більше API-маршрутів, додаючи нові файли до каталогу server/api. Наприклад:

server/api/users.js: Для обробки запитів, пов'язаних з користувачами.
server/api/products/[id].js: Для обробки запитів до конкретних продуктів за їхнім ID (динамічні маршрути).
У ваших серверних обробниках ви матимете доступ до об'єкта event, який надає інформацію про запит, таку як:

event.context: Об'єкт для обміну даними між обробниками.
getQuery(event): Для отримання параметрів запиту з URL.
getRouterParams(event): Для отримання параметрів з динамічних маршрутів.
readBody(event): Для читання тіла запиту (наприклад, для методів POST або PUT).
setResponseStatus(event, code): Для встановлення коду статусу відповіді.
Цей простий приклад є відправною точкою. Ви можете будувати на ньому більш складні API з доступом до баз даних, автентифікацією та іншими функціональними можливостями, використовуючи можливості Nuxt.js та бібліотеки h3.

..---------
components: Ця папка призначена для багаторазово використовуваних UI-елементів. Nuxt.js автоматично реєструє компоненти,
 розташовані в цій папці, що полегшує їх використання у ваших сторінках та інших компонентах. Якщо ваш проєкт ще не має жодних
  повторно використовуваних елементів, ця папка може бути відсутня. Ви створите її, коли виникне потреба в таких компонентах.

layouts: Ця папка використовується для визначення макетів вашого застосунку. Макет - це структура, яка обгортає
 ваші сторінки (наприклад, з шапкою, підвалом, бічною панеллю). За замовчуванням Nuxt.js використовує базовий макет.
  Якщо ви не створювали жодних власних макетів, ця папка може бути відсутня. Ви створите її, коли захочете 
  змінити загальну структуру ваших сторінок.